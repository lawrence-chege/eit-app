{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","charactersData","map","row","index","key","type","name","country","onClick","removeCharacter","Table","this","Component","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","Country","className","placeholder","onChange","App","characters","filter","character","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAEMA,EAAc,WAChB,OACI,+BACI,4BACI,qCACA,oCACA,0CAMVC,EAAY,SAAAC,GACd,IAAMC,EAAOD,EAAME,eAAeC,KAAI,SAACC,EAAKC,GACxC,OACI,wBAAIC,IAAKD,GACL,4BACA,2BACAE,KAAK,cAGL,4BAAKH,EAAII,MACT,4BAAKJ,EAAIK,SACT,4BACI,4BAAQC,QAAW,kBAAKV,EAAMW,gBAAgBN,KAA9C,eAKhB,OACI,+BAAQJ,IAgBDW,E,iLAVD,IAAD,EACqCC,KAAKb,MAAxCE,EADF,EACEA,eAAgBS,EADlB,EACkBA,gBACvB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWT,eAAgBA,EAAgBS,gBAAiBA,S,GANxDG,a,OCWLC,E,YA7CX,WAAYf,GAAO,IAAD,8BACd,4CAAMA,KAOVgB,aAAe,SAAAC,GAAS,IAAD,EACGA,EAAMC,OAArBV,EADY,EACZA,KAAMW,EADM,EACNA,MACb,EAAKC,SAAL,eACKZ,EAAOW,KAXE,EAclBE,WAAY,WACR,EAAKrB,MAAMsB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,eAdnB,EAAKA,aAAc,CACfhB,KAAM,GACNiB,QAAS,IAEb,EAAKF,MAAQ,EAAKC,aANJ,E,sEAkBT,IAAD,EACoBX,KAAKU,MAAtBf,EADH,EACGA,KAAMC,EADT,EACSA,QACb,OACI,0BAAMiB,UAAU,WACZ,wCACA,2BACInB,KAAK,OACLC,KAAK,OACLmB,YAAa,aACbR,MAAOX,EACPoB,SAAUf,KAAKG,eAEnB,2CACA,2BACIT,KAAK,OACLC,KAAK,UACLW,MAAOV,EACPkB,YAAa,eACbC,SAAUf,KAAKG,eAEnB,2BAAOT,KAAK,SAASY,MAAM,SAAST,QAASG,KAAKQ,kB,GAvC/CP,aCgCJe,G,iNA5BbN,MAAQ,CACNO,WAAa,I,EAEfnB,gBAAkB,SAAAN,GAAU,IACnByB,EAAc,EAAKP,MAAnBO,WACP,EAAKV,SAAS,CACZU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAK5B,Q,EAKlBiB,aAAe,SAAAU,GACb,EAAKZ,SAAS,CAACU,WAAW,GAAD,mBAAM,EAAKP,MAAMO,YAAjB,CAA6BE,O,wEAGjCnB,KAAKU,MAAnBO,WAEP,OACE,yBAAKJ,UAAU,aACb,2CACA,kBAAE,EAAF,CAAOJ,aAAcT,KAAKS,eAC1B,kBAAC,EAAD,CAAOpB,eAAkBW,KAAKU,MAAMO,WAAYnB,gBAAiBE,KAAKF,uB,GAvB5DG,cCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6befedaf.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst TableHeader = () =>{\n    return (\n        <thead>\n            <tr>\n                <th>Check</th>\n                <th>Name</th>\n                <th>Country</th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody = props => {\n    const rows = props.charactersData.map((row, index) =>{\n        return (\n            <tr key={index}>\n                <td>\n                <input\n                type=\"checkbox\"\n                />\n                </td>\n                <td>{row.name}</td>\n                <td>{row.country}</td>\n                <td>\n                    <button onClick = {()=> props.removeCharacter(index)}>Delete</button>\n                </td>\n            </tr>\n        )\n    });\n    return (\n        <tbody>{rows}</tbody>\n    )\n\n}\n\nclass Table extends Component {\n    render (){\n        const {charactersData, removeCharacter} = this.props\n        return(\n            <table>\n                <TableHeader />\n                <TableBody charactersData={charactersData} removeCharacter={removeCharacter}/>\n            </table>\n        )\n    }\n}\nexport default Table","import React, {Component} from 'react';\n\nclass Form extends Component{\n    constructor(props){\n        super(props)\n        this.initialState ={\n            name: '',\n            Country: ''\n        }\n        this.state = this.initialState\n    }\n    handleChange = event =>{\n        const {name, value} = event.target\n        this.setState({\n            [name]: value,\n        })\n    }\n    submitForm =()=>{\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n    render(){\n        const {name, country} = this.state;\n        return (\n            <form className=\"new-eit\">\n                <label>Name </label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder= \"EIT's Name\"\n                    value={name}\n                    onChange={this.handleChange}\n                />\n                <label>Country </label>\n                <input\n                    type=\"text\"\n                    name=\"country\"\n                    value={country}\n                    placeholder =\"Home country\"\n                    onChange={this.handleChange}\n                />\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n\n            </form>\n        )\n    }\n\n}\nexport default Form;","import React, {Component} from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters : [],\n  }\n  removeCharacter = index => {\n    const {characters} = this.state\n    this.setState({\n      characters: characters.filter((character, i)=>{\n        return i !==index\n      })\n    })\n\n  }\n  handleSubmit = character => {\n    this.setState({characters: [...this.state.characters, character]})\n  }\n  render(){\n    const {characters} = this.state\n    \n    return(\n      <div className=\"container\">\n        <h1>Hello World</h1>\n        < Form handleSubmit={this.handleSubmit}/>\n        <Table charactersData = {this.state.characters} removeCharacter={this.removeCharacter}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}