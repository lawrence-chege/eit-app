{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","scope","TableBody","props","rows","charactersData","map","row","index","key","type","name","country","age","phone","onClick","removeCharacter","Table","this","className","Component","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","Country","placeholder","onChange","App","characters","filter","character","i","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae40391a.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst TableHeader = () =>{\n    return (\n        <thead>\n            <tr>\n                <th scope=\"row\">Check</th>\n                <th scope=\"row\">Name</th>\n                <th scope=\"row\">Country</th>\n                <th scope=\"row\">Age</th>\n                <th scope=\"row\">Phone Number</th>\n                <th scope=\"row\"><button>Batch Delete</button></th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody = props => {\n    const rows = props.charactersData.map((row, index) =>{\n        return (\n            <tr key={index}>\n                <td>\n                <input\n                type=\"checkbox\"\n                />\n                </td>\n                <td>{row.name}</td>\n                <td>{row.country}</td>\n                <td>{row.age}</td>\n                <td>{row.phone}</td>\n                <td>\n                    <button onClick = {()=> props.removeCharacter(index)}>Delete</button>\n                </td>\n            </tr>\n        )\n    });\n    return (\n        <tbody>{rows}</tbody>\n    )\n\n}\n\nclass Table extends Component {\n    render (){\n        const {charactersData, removeCharacter} = this.props\n        return(\n            <table className=\"table\">\n                <TableHeader />\n                <TableBody charactersData={charactersData} removeCharacter={removeCharacter}/>\n            </table>\n        )\n    }\n}\nexport default Table","import React, {Component} from 'react';\n\nclass Form extends Component{\n    constructor(props){\n        super(props)\n        this.initialState ={\n            name: '',\n            Country: '',\n            age:'',\n            phone:'',\n\n        }\n        this.state = this.initialState\n    }\n    handleChange = event =>{\n        const {name, value} = event.target\n        this.setState({\n            [name]: value,\n        })\n    }\n    submitForm =()=>{\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n    render(){\n        const {name, country, age, phone} = this.state;\n        return (\n            <form className=\"form-group\">\n                <label>Name </label>\n                <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder= \"EIT's Name\"\n                    value={name}\n                    onChange={this.handleChange}\n                />\n                <label>Country </label>\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"country\"\n                    value={country}\n                    placeholder =\"Home country\"\n                    onChange={this.handleChange}\n                />\n                <label>Age</label>\n                <input\n                    type=\"text\"\n                    name=\"age\"\n                    className=\"form-control\"\n                    value={age}\n                    placeholder =\"Age of Eit\"\n                    onChange={this.handleChange}\n                />\n                <label>Phone Number</label>\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"phone\"\n                    value={phone}\n                    placeholder =\"Phone Number\"\n                    onChange={this.handleChange}\n                />\n                <br></br>\n                <input className=\"btn btn-success\" type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n\n            </form>\n        )\n    }\n\n}\nexport default Form;","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters: [],\n  }\n  removeCharacter = index => {\n    const { characters } = this.state\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      })\n    })\n\n  }\n  handleSubmit = character => {\n    this.setState({ characters: [...this.state.characters, character] })\n  }\n  render() {\n    const { characters } = this.state\n\n    return (\n      <div className=\"container\">\n      <nav className=\"nav\">\n        <h1 className=\"nav-link active\" href=\"#\">Akwaaba EITs</h1>\n      </nav>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            < Form handleSubmit={this.handleSubmit} />\n          </div>\n          <div className=\"col-md-auto\">\n            <Table charactersData={this.state.characters} removeCharacter={this.removeCharacter} />\n          </div>\n        </div>\n\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}